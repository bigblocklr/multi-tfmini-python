# -*- coding: utf-8 -*
import pigpio
import time

RX1 = 16
RX2 = 20
Buzzer = 21

pi = pigpio.pi()
pi.set_mode(RX1, pigpio.INPUT)
pi.set_mode(RX2, pigpio.INPUT)
pi.set_mode(Buzzer, pigpio.OUTPUT)
pi.bb_serial_read_open(RX1, 115200)
pi.bb_serial_read_open(RX2, 115200)

def getTFminiData():
  while True:
    #print("#############")
    time.sleep(0.05)	#change the value if needed
    (count1, recv1) = pi.bb_serial_read(RX1)
    if count1 > 8:
      for i in range(0, count1-9):
        if recv1[i] == 89 and recv1[i+1] == 89: # 0x59 is 89
          checksum = 0
          for j in range(0, 8):
            checksum = checksum + recv1[i+j]
          checksum = checksum % 256
          if checksum == recv1[i+8]:
            distance1 = recv1[i+2] + recv1[i+3] * 256
            if distance1 <= 1200:
              print(distance1) 
            #else:
              # raise ValueError('distance error: %d' % distance)	
            #i = i + 9

    time.sleep(0.05)	#change the value if needed
    (count2, recv2) = pi.bb_serial_read(RX2)
    if count2 > 8:
      for i in range(0, count2-9):
        if recv2[i] == 89 and recv2[i+1] == 89: # 0x59 is 89
          checksum = 0
          for j in range(0, 8):
            checksum = checksum + recv2[i+j]
          checksum = checksum % 256
          if checksum == recv2[i+8]:
            distance2 = recv2[i+2] + recv2[i+3] * 256
            if distance2 <= 1200:
              print(distance2) 
            #else:
              # raise ValueError('distance error: %d' % distance)	
            #i = i + 9
    if distance1 < distance2:
        distance = distance1
    else:
        distance = distance2
        
    if distance < 200:
        pi.write(Buzzer, 1)
        sleep(.5)
        pi.write(Buzzer, 0)
    elif (distance >=200 and distance < 400):
        pi.write(Buzzer, 1)
    else:
        pi.write(Buzzer, 0)

if __name__ == '__main__':
  try:
    getTFminiData()
  except:  
    pi.bb_serial_read_close(RX1)
    pi.bb_serial_read_close(RX2)
    pi.stop()
